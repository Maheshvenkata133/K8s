// Below are the k8s commands using in our project
$ kubectl get pods -A -o wide     //List all pods in all namespaces, -o wide --Provides detailed output including node information 

$ kubectl get nodes -Ao wide
$ kubectl get pods --all-namespaces | grep <node-name>   //To list all the pods on specific node 
$ kubectl logs <pod-name> 
$ kubectl describe <po-name>    //To check the events
$ kubectl exec -it <pod-name> -- /bin/bash   //To get interactive shell in k8s pod.
$ kubectl exec -it <pod-name> -n <namespace> -- /bin/bash     //On specific namespace pod
$ kubectl exec -it <pod-name> -c <container-name> -- /bin/bash   //If pod has more than one container
$ kubectl exec -it <pod-name> -c <container-name> -n <namespcace> -- /bin/bash  
$ kubectl get rs -A -o wide     ---> List all replicas from all namespaces
$ kubectl get rs -A -o wide | grep <node1>
$ kubectl get pods -o wide    //To check where the replica(pod)s are running

$ kubectl run nginx-pod --image=nginx:latest --port=80     //Binding port inside the container
$ kubectl run nginx-pod --image=nginx:latest --port=80 --restart=Never     //--restart=Never --> Ensures it runs as pod not a deployement or replicaset
-----------------------------------------------------------------------------
Debugging:
$ kubectl -n <name-space> describe pod <pod-name>         // To List the containers in the pod from specific namespace.
$ kubectl describe po <pod-name>
$ kubectl -n <name-space> logs <pod-name>
$ kubectl -n <name-space> exec -it <pod-name> --/bin/sh    // To enter into the pod
$ kubectl -n <name-space> exec -it <pod-name> -c <container-name> --/bin/bash     //To enter into the specific container in a pod.
-------------------------------------------------------------------------------
Before doing maintance for the servers:
//$ kubectl get no
//$ kubectl cordon <node-name>    ---> Scheduling disabled
//$ kubectl get nodes
//$ kubectl drain no <node-name> --ignore-daemons --delete-emptydir-data 
This will evict all non-daemonset pods and reschedule them on other nodes.
--ignore-daemonsets → Keeps daemonset pods running.
--delete-emptydir-data → Deletes pods using emptyDir volumes.
// $ kubectl get nodes

//$ kubectl uncordon <node-name>   --> Now it is ready for scheduling
//$ kubectl get nodes
--------------------------------------------------------------------------------
$ kubectl get pods -A | egrep -i -v 'Completed|running' |grep -i imagepull 
# k get pods -A → Lists all pods in all namespaces.
# egrep -i -v 'completed|running' → Filters out Completed and Running pods.
$ grep -i imagepull → Filters for pods failing due to ImagePullBackOff errors.

$ kubectl get pods -Ao wide | grep txnserver
# k get pods -Ao wide → Lists all pods across namespaces with detailed node info.
# grep txnserver → Filters for txnserver pods.

-----------------------------------------------------------------------
# kubectl -n <namespace> rollout restart deployment <deployment-name>     ---> Restart the services
$ kubectl rollout restart deployment acs -n s2 
$ kubectl -n <namespace> rollout undo deployment <deployment-name>
$ kubectl -n <namespace> rollout history deployment <deployment-name>
$ kubectl -n default rollout history deployment my-app-deployment --revision=2  ---> rollback example
-----------------------------------------------------------------------
$ kubectl config view --minify --output 'jsonpath={..namespace}'    ---->To display the current namespace
$ kubectl config set-context --current --namespace=argo-cd       ----->To Set a Default Namespace







